/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI のベース
 * OpenAPI のファイルをサンプルとして作成
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 共通プロパティ
 * @export
 * @interface EntityBase
 */
export interface EntityBase {
    /**
     * 生成日時
     * @type {string}
     * @memberof EntityBase
     */
    'created_at'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof EntityBase
     */
    'updated_at'?: string;
    /**
     * 削除日時
     * @type {string}
     * @memberof EntityBase
     */
    'deleted_at'?: string;
}
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 製品の ID
     * @type {number}
     * @memberof Product
     */
    'id': number;
    /**
     * 製品名
     * @type {string}
     * @memberof Product
     */
    'name'?: string;
    /**
     * 限定販売かどうか
     * @type {boolean}
     * @memberof Product
     */
    'is_limited'?: boolean;
    /**
     * 発売日
     * @type {string}
     * @memberof Product
     */
    'released_at'?: string;
    /**
     * 生成日時
     * @type {string}
     * @memberof Product
     */
    'created_at'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof Product
     */
    'updated_at'?: string;
    /**
     * 削除日時
     * @type {string}
     * @memberof Product
     */
    'deleted_at'?: string;
}
/**
 * 製品
 * @export
 * @interface ProductAllOf
 */
export interface ProductAllOf {
    /**
     * 製品の ID
     * @type {number}
     * @memberof ProductAllOf
     */
    'id': number;
    /**
     * 製品名
     * @type {string}
     * @memberof ProductAllOf
     */
    'name'?: string;
    /**
     * 限定販売かどうか
     * @type {boolean}
     * @memberof ProductAllOf
     */
    'is_limited'?: boolean;
    /**
     * 発売日
     * @type {string}
     * @memberof ProductAllOf
     */
    'released_at'?: string;
}
/**
 * 
 * @export
 * @interface ProductTest
 */
export interface ProductTest {
    /**
     * テスト製品の ID
     * @type {number}
     * @memberof ProductTest
     */
    'id': number;
    /**
     * 製品名
     * @type {string}
     * @memberof ProductTest
     */
    'name': string;
    /**
     * タイプ
     * @type {string}
     * @memberof ProductTest
     */
    'type'?: string;
    /**
     * 限定販売かどうか
     * @type {boolean}
     * @memberof ProductTest
     */
    'is_limited'?: boolean;
    /**
     * 発売日
     * @type {string}
     * @memberof ProductTest
     */
    'released_at'?: string;
    /**
     * 生成日時
     * @type {string}
     * @memberof ProductTest
     */
    'created_at'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof ProductTest
     */
    'updated_at'?: string;
    /**
     * 削除日時
     * @type {string}
     * @memberof ProductTest
     */
    'deleted_at'?: string;
}
/**
 * テスト製品
 * @export
 * @interface ProductTestAllOf
 */
export interface ProductTestAllOf {
    /**
     * テスト製品の ID
     * @type {number}
     * @memberof ProductTestAllOf
     */
    'id': number;
    /**
     * 製品名
     * @type {string}
     * @memberof ProductTestAllOf
     */
    'name': string;
    /**
     * タイプ
     * @type {string}
     * @memberof ProductTestAllOf
     */
    'type'?: string;
    /**
     * 限定販売かどうか
     * @type {boolean}
     * @memberof ProductTestAllOf
     */
    'is_limited'?: boolean;
    /**
     * 発売日
     * @type {string}
     * @memberof ProductTestAllOf
     */
    'released_at'?: string;
}

/**
 * BasicApi - axios parameter creator
 * @export
 */
export const BasicApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 製品を 1 件返す
         * @summary ID による製品取得
         * @param {number} id product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProductById', 'id', id)
            const localVarPath = `/product/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 製品を 1 件返す
         * @summary ID による製品取得
         * @param {number} id product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductTestById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProductTestById', 'id', id)
            const localVarPath = `/product-test/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BasicApi - functional programming interface
 * @export
 */
export const BasicApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BasicApiAxiosParamCreator(configuration)
    return {
        /**
         * 製品を 1 件返す
         * @summary ID による製品取得
         * @param {number} id product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 製品を 1 件返す
         * @summary ID による製品取得
         * @param {number} id product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductTestById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductTest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductTestById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BasicApi - factory interface
 * @export
 */
export const BasicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BasicApiFp(configuration)
    return {
        /**
         * 製品を 1 件返す
         * @summary ID による製品取得
         * @param {number} id product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById(id: number, options?: any): AxiosPromise<Product> {
            return localVarFp.getProductById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 製品を 1 件返す
         * @summary ID による製品取得
         * @param {number} id product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductTestById(id: number, options?: any): AxiosPromise<ProductTest> {
            return localVarFp.getProductTestById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getProductById operation in BasicApi.
 * @export
 * @interface BasicApiGetProductByIdRequest
 */
export interface BasicApiGetProductByIdRequest {
    /**
     * product id
     * @type {number}
     * @memberof BasicApiGetProductById
     */
    readonly id: number
}

/**
 * Request parameters for getProductTestById operation in BasicApi.
 * @export
 * @interface BasicApiGetProductTestByIdRequest
 */
export interface BasicApiGetProductTestByIdRequest {
    /**
     * product id
     * @type {number}
     * @memberof BasicApiGetProductTestById
     */
    readonly id: number
}

/**
 * BasicApi - object-oriented interface
 * @export
 * @class BasicApi
 * @extends {BaseAPI}
 */
export class BasicApi extends BaseAPI {
    /**
     * 製品を 1 件返す
     * @summary ID による製品取得
     * @param {BasicApiGetProductByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicApi
     */
    public getProductById(requestParameters: BasicApiGetProductByIdRequest, options?: AxiosRequestConfig) {
        return BasicApiFp(this.configuration).getProductById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 製品を 1 件返す
     * @summary ID による製品取得
     * @param {BasicApiGetProductTestByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicApi
     */
    public getProductTestById(requestParameters: BasicApiGetProductTestByIdRequest, options?: AxiosRequestConfig) {
        return BasicApiFp(this.configuration).getProductTestById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}


